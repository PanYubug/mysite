from django.shortcuts import render, get_object_or_404# Create your views here.from django.http import HttpResponse, Http404from django.template import loaderfrom polls.models import Question# def index(request):#     latest_question_list = Question.objects.order_by('-pub_date')[:5]#     template = loader.get_template('polls/index.html')#     context = {#         'latest_question_list': latest_question_list,#     }#     return HttpResponse(template.render(context, request))# 上述代码的作用是，载入 polls/index.html 模板文件，并且向它传递一个上下文(context)。这个上下文是一个字典，它将模板内的变量映射为 Python 对象。# 一个快捷的render()# 我们不再需要导入 loader 和 HttpResponse 。不过如果你还有其他函数（比如说 detail, results, 和 vote ）需要用到它的话，就需要保持 HttpResponse 的导入。def index(request):    latest_question_list = Question.objects.order_by('-pub_date')[:5]    return render(request, 'polls/index.html',                  {                      'latest_question_list': latest_question_list                  })# 如果指定问题 ID 所对应的问题不存在，这个视图就会抛出一个 Http404 异常。# def detail(request, question_id):#     try:#         question = Question.objects.get(pk=question_id)#     except Question.DoesNotExist:#         raise Http404('Question does not exist PY')#     return render(request, 'polls/detail.html',#                   {#                       'question': question,#                   })def detail(request, question_id):    question = get_object_or_404(Question, pk=question_id)    return render(request, 'polls/detail.html',                  {                      'question': question                  })def results(request, question_id):    response = "You're looking at the results of question %s."    return HttpResponse(response % question_id)def vote(request, question_id):    return HttpResponse("You're voting on question %s." % question_id)